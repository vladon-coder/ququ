import asyncio
import hashlib
import requests
from requests.structures import CaseInsensitiveDict
from bs4 import BeautifulSoup
from telethon import functions, types, errors
from telethon.sync import TelegramClient
import config
import random
import json

token_now = requests.get('https://pastebin.com/raw/J7HtUwez').content
token = str(token_now).replace("b'", "").replace("'", "")

login = input('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: ')
if login == token:
    print('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n')
    print('1. –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É\n')
    print('2. –ü–æ–∏—Å–∫ –ø–æ –ø–æ—á—Ç–µ\n')
    print('3. –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º, –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ')
    choice = input('–í—ã–±–µ—Ä–∏—Ç–µ: ')
    if choice == '1':
        def phone():
                phonse = input('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ')
                phonse = phonse.replace('+', '').replace('-', '').replace('(', '').replace(')',
                                                                                           '').replace(
                    ' ', '')
                phone = phonse[1:]

                SBnum = requests.get(f"https://fincalculator.ru/api/tel/{phonse}")
                datae = SBnum.json()
                # –ø–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞ -----------------------------
                urlMNP = f"https://xn----dtbofgvdd5ah.xn--p1ai/php/mnp.php?nomer={phonse}"
                mnpSiteSourc = requests.get(urlMNP).text.strip()
                mnp = mnpSiteSourc.replace('no',
                                           '–ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–ª—Å—è')  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç "no" —Ç–æ "–ù–æ–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–ª—Å—è"
                # –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–†–ê–ù–´, –†–ï–ì–ò–û–ù–ê –ò –û–ü–ï–†–ê–¢–û–†–ê ------------------------
                try:
                    countrys = datae["country"]
                    regions = datae["region"]
                    operators = datae["operator"]
                    if countrys != '–†–æ—Å—Å–∏—è':
                        fstep = f'üì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phonse}\n ‚îú –°—Ç—Ä–∞–Ω–∞: {countrys}\n ‚îú –ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞: {mnp}\n ‚îî –û–ø–µ—Ä–∞—Ç–æ—Ä: {regions}'
                    else:
                        fstep = f'üì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phonse}\n ‚îú –°—Ç—Ä–∞–Ω–∞: {countrys}\n ‚îú –†–µ–≥–∏–æ–Ω: {regions}\n ‚îú –ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞: {mnp}\n ‚îî –û–ø–µ—Ä–∞—Ç–æ—Ä: {operators}'
                except:
                    countrys = '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ'
                    regions = '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ'
                    operators = '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ'

                SberURL = "https://securepayments.sberbank.ru/sbersafe/client/find?phone=" + phone

                headers = CaseInsensitiveDict()
                headers["Content-Length"] = "0"

                api_id = config.api_id
                api_hash = config.api_hash
                loop = asyncio.get_event_loop()

                respas = requests.post(SberURL, headers=headers).json()
                if 'error' not in respas:
                    sberrr = f'üí≥ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ç —Å–±–µ—Ä–±–∞–Ω–∫–∞: {respas}'
                else:
                    sberrr = ''

                try:
                    eqereq = phonse
                    email_login = (eqereq.split("@"))[0]
                    yandex = requests.get(f"https://yandex.ru/collections/api/users/{email_login}")
                    try:
                        yamail = phonse + '@yandex.ru'
                    except:
                        yamail = ''
                    yamailo = f', `{yamail}`'
                    yadata = yandex.json()
                    public_id = yadata['public_id']
                    display_name = yadata['display_name']
                    try:
                        yaname = f' ({display_name})'
                    except:
                        yaname = ''
                    try:
                        yandexx = f'\n„äó –Ø–Ω–¥–µ–∫—Å ID: {public_id}{yaname}'
                    except:
                        yandexx = f'\n„äó –Ø–Ω–¥–µ–∫—Å ID: {public_id}'
                except:
                    display_name = ''
                    public_id = ''
                    yandexx = ''
                    yamail = ''
                    yaname = display_name
                    if yandexx == '':
                        yamailo = ''

                # –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏
                session = requests.Session()
                session.get(
                    f'https://www.ok.ru/dk?st.cmd=anonymMain&st.accRecovery=on&st.error=errors.password.wrong&st.email={phonse}')
                request = session.get(
                    f'https://www.ok.ru/dk?st.cmd=anonymRecoveryAfterFailedLogin&st._aid=LeftColumn_Login_ForgotPassword')
                root_soup = BeautifulSoup(request.content, 'html.parser')
                soup = root_soup.find('div', {'data-l': 'registrationContainer,offer_contact_rest'})
                if soup:
                    account_info = soup.find('div', {'class': 'ext-registration_tx taCenter'})
                    masked_email = soup.find('button', {'data-l': 't,email'})
                    masked_phone = soup.find('button', {'data-l': 't,phone'})
                    if masked_phone:
                        masked_phone = masked_phone.find('div', {
                            'class': 'ext-registration_stub_small_header'}).get_text()
                    if masked_email:
                        masked_email = masked_email.find('div', {
                            'class': 'ext-registration_stub_small_header'}).get_text()
                        masked_email = f'–ü–æ—á—Ç–∞: `{masked_email}`,'
                    else:
                        masked_email = ''
                    if account_info:
                        masked_name = account_info.find('div',
                                                        {'class': 'ext-registration_username_header'})
                        if masked_name:
                            masked_name = masked_name.get_text()
                            account_info = account_info.findAll('div', {'class': 'lstp-t'})
                        if account_info:
                            profile_info = account_info[0].get_text()
                            profile_registred = account_info[1].get_text()
                        else:
                            profile_info = None
                            profile_registred = None
                    else:
                        pass
                try:
                    age = profile_info[:7].replace(',', '')
                    cityok = profile_info[8:].replace(',', '')
                    age = f''
                    cityok = f'{cityok}'
                    ok = f'\nüÜó –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: {masked_name} ({profile_info}, {masked_email} {profile_registred})'

                except:
                    ok = ''
                    cityok = ''
                    age = ''
                    masked_email = ''

                def address():
                    if regions == '–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'msk'
                    elif regions == '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'irkutsk'
                    elif regions == '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π':
                        gorod = 'barnaul'
                    elif regions == '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π':
                        gorod = 'ber'
                    elif regions == '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'bryansk'
                    elif regions == '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'volgograd'
                    elif regions == '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'voronezh'
                    elif regions == '–£–¥–º—É—Ä—Ç—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞':
                        gorod = 'votkinsk'
                    elif regions == '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'dzr'
                    elif regions == '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'ulsk'
                    elif regions == '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'voronezh'
                    elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª':
                        gorod = 'yola'
                    elif regions == '–†–µ—Å–ø—É–±–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω':
                        gorod = 'kazan'
                    elif regions == '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'kirov'
                    elif regions == '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π':
                        gorod = 'krd'
                    elif regions == '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π':
                        gorod = 'krsk'
                    elif regions == '–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'kurgan'
                    elif regions == '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'kursk'
                    elif regions == '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'lipetsk'
                    elif regions == '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'chel'
                    elif regions == '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'mich'
                    elif regions == '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'nsk'
                    elif regions == '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'omsk'
                    elif regions == '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'oren'
                    elif regions == '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'penza'
                    elif regions == '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'rostov'
                    elif regions == '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'ryazan'
                    elif regions == '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'samara'
                    elif regions == '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥':
                        gorod = 'interzet'
                    elif regions == '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'saratov'
                    elif regions == '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'voronezh'
                    elif regions == '–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'tomsk'
                    elif regions == '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'tver'
                    elif regions == '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'tula'
                    elif regions == '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'tmn'
                    elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è':
                        gorod = 'ulu'
                    elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ç–æ—Ä—Å—Ç–∞–Ω':
                        gorod = 'ufa'
                    elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ß—É–≤–∞—à–∏—è':
                        gorod = 'cheb'
                    elif regions == '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                        gorod = 'yar'
                    else:
                        gorod = "msk"
                    urldru = 'https://api-profile.domru.ru/v1/unauth/contract-asterisked?contact=' + phonse + '&amp;isActive=1'

                    headersd = CaseInsensitiveDict()
                    headersd["Host"] = "api-profile.domru.ru"
                    headersd["Domain"] = gorod

                    resp = requests.get(urldru, headers=headersd).json()
                    try:
                        dataa = resp['contacts'][0]['address']
                        address = f'üè† –í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {dataa} (–î–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –î–û–ú–†–£, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è, –∫–∞–∫ –µ—Å—Ç—å. –ê–¥—Ä–µ—Å, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –ø–æ–¥—å–µ–∑–¥.)\n'
                        print(address)
                    except:
                        address = ''
                    print(f'{fstep}\n\n{sberrr}\n{yandexx}\n{ok}\n{address}')

                address()


                nomer = phonse

                head = {
                    "Host": "api.vkpay.io",
                    "Accept": "application/json, text/plain, */*",
                    "Origin": "https://ea-miniapp.vkpay.io",
                    "X-App-Params": '{"vk_access_token_settings":"notify,friends,groups","vk_app_id":"7131443","vk_are_notifications_enabled":"0","vk_experiment":"eyIxNjE4IjowfQ","vk_is_app_user":"1","vk_is_favorite":"0","vk_language":"ru","vk_platform":"desktop_web","vk_ref":"other","vk_ts":"1650541292","vk_user_id":"616028231","sign":"zOQRbuQQcD95SmmTcHR_EtmeDkhwL4VCjQ7LS6PcYMI"}',
                    "X-VKApp-Token": "f7b1f08d-ee0c-479f-bdb0-912bd38ddaa9"
                }

                r = requests.post("https://api.vkpay.io/visa-alias/p2p/options", headers=head,
                                  json={"phone": str(nomer)})

                data = json.loads(r.text)

                name = data["additional_data"]["user_name"]
                hasVk = data["additional_data"]["has_vk"]
                vk_gua = name.replace(' ', '+')
                if name != '':
                    print('ü§ñ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: '+name+'\n   –°–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ –í–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: https://google.com/search?q=site:vk.com+intext:'+vk_gua)
                else:
                    pass
                URLavito = "https://opredelitel.com/pay/" + phonse
                HEADERS = {
                    "User-Agent":
                        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0"
                }
                ra = requests.get(URLavito, headers=HEADERS)
                soup = BeautifulSoup(ra.content, 'html.parser')
                items = soup.findAll('div', class_='preview_da_line')
                comps = []
                for item in items:
                    comps.append({
                        'title':
                            item.find('div', class_='da_title').get_text(strip=True),
                        'info':
                            item.find('div', class_='da_info').get_text(strip=True)
                    })
                for comp in comps:
                    print(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—å—è–≤–ª–µ–Ω–∏–µ: {comp['title']}, {comp['info']}")

                def print_user(full_user):
                    '''
                    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–º –Ω–æ–º–µ—Ä–µ
                    '''

                    full_user = full_user.user
                    # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ—É –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
                    user_id = full_user.id
                    name = full_user.first_name
                    if full_user.last_name is not None:
                        name = f'{name} {full_user.last_name}'
                    if full_user.username is not None:
                        username = full_user.username
                    else:
                        username = '-'
                    phone = full_user.phone
                    print(f'üòà Telegram: {username}, {user_id}')

                async def main():
                    number = phonse
                    async with TelegramClient(f'session', api_id, api_hash) as client:
                        try:
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
                            result = await client(functions.contacts.ImportContactsRequest(
                                contacts=[types.InputPhoneContact(
                                    client_id=random.randrange(-2 ** 63, 2 ** 63),
                                    first_name=number,
                                    last_name='',
                                    phone=number
                                )]
                            ))
                            # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω
                            if len(result.imported) > 0:
                                user = result.users[0]
                                # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø–∞—Ä–∞–º–µ—Ç—Ä send_user = True, —Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
                                if config.send_user:
                                    await client.send_file("me", types.InputMediaContact(
                                        phone_number=number,
                                        first_name=number,
                                        last_name='',
                                        vcard=''
                                    ))
                                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
                                result = await client(functions.contacts.GetContactsRequest(
                                    hash=0
                                ))
                                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                                await client(functions.contacts.DeleteContactsRequest(id=result.users))
                                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–¥–∞–ª—ë–Ω–Ω–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ.
                                full_user = await client(
                                    functions.users.GetFullUserRequest(id=user))
                                # –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –∑–∞–∫–æ–Ω—á–µ–Ω–∞

                                # –ü–æ –∂–µ–ª–∞–Ω–∏—é, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ—É –æ —é–∑–µ—Ä–µ –Ω–∞ —ç–∫—Ä–∞–Ω
                                print_user(full_user)
                            else:
                                #  –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
                                x = 1
                        except errors.FloodWaitError as e:
                            print(f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–æ–≤–∞–Ω–∏–µ API –Ω–∞ {e.seconds} —Å–µ–∫—É–Ω–¥')

                loop.run_until_complete(main())
                print(
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∂–µ–ª—Ç–æ–π —Å—Ç—Ä–µ–ª–æ—á–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –±–∞–∑–∞–º...')
                bbd = requests.get(
                    'https://4m89t04ghtm8mieieieieie9mtie9dbigdatanum.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd)
                bb1 = requests.get(
                    'https://wdwfg454df4gf45gf4d5fdfff.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bb1)
                bb2 = requests.get(
                    'https://werwecrvebt434b654ft43d3fg.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode("utf-8")
                print(bb2)
                bb3 = requests.get(
                    'https://servttbertbertvsrf.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode("utf-8")
                print(bb3)
                bb4 = requests.get(
                    'https://refretertertbert54vt45b65.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode("utf-8")
                print(bb4)
                bb5 = requests.get(
                    'https://pungentfrigidchief.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode("utf-8")
                print(bb5)
                bbd6 = requests.get(
                    'https://asd.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd6)
                bbd7 = requests.get(
                    'https://forsakenyummyleads.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd7)
                bbd8 = requests.get(
                    'https://feistyunwittinginstructionset.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd8)
                bbd9 = requests.get(
                    'https://mellowhardtofindcopycat.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd9)
                bbd10 = requests.get(
                    'https://essentiallivespellchecker.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd10)
                bbd11 = requests.get(
                    'https://achingcheerfullinuxpc.sdfsdfsfsd2321.repl.co//info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd11)

        phone()
    elif choice == '2':
        def main():
            email = input('–í–≤–µ–¥–∏—Ç–µ E-Mail: ')

            display_name = ''
            public_id = ''
            yandexx = ''
            yamail = ''
            yaname = ''
            email_login = (email.split("@"))[0]
            email_login = email_login + '@ya.ru'
            yandex = requests.get(f"https://yandex.ru/collections/api/users/{email_login}")
            yamail = email_login + '@yandex.ru'
            yamailo = f', `{yamail}`'
            yadata = yandex.json()
            try:
                public_id = yadata['public_id']
                display_name = yadata['display_name']
            except:
                public_id = ''
                display_name = ''
            if display_name != '':
                yaname = f' ({display_name})'
            else:
                yaname = ''
            if display_name != '':
                yandexx = f'\n„äó –Ø–Ω–¥–µ–∫—Å ID: {public_id} {yaname}'

            else:
                yandexx = f''

            session = requests.Session()
            session.get(
                f'https://www.ok.ru/dk?st.cmd=anonymMain&st.accRecovery=on&st.error=errors.password.wrong&st.email={email}')
            request = session.get(
                f'https://www.ok.ru/dk?st.cmd=anonymRecoveryAfterFailedLogin&st._aid=LeftColumn_Login_ForgotPassword')
            root_soup = BeautifulSoup(request.content, 'html.parser')
            soup = root_soup.find('div', {'data-l': 'registrationContainer,offer_contact_rest'})
            if soup:
                account_info = soup.find('div', {'class': 'ext-registration_tx taCenter'})
                masked_email = soup.find('button', {'data-l': 't,email'})
                masked_phone = soup.find('button', {'data-l': 't,phone'})
                if masked_phone:
                    masked_phone = masked_phone.find('div', {
                        'class': 'ext-registration_stub_small_header'}).get_text()
                if masked_email:
                    masked_email = masked_email.find('div', {
                        'class': 'ext-registration_stub_small_header'}).get_text()
                    masked_email = f'–ü–æ—á—Ç–∞: `{masked_email}`,'
                else:
                    masked_email = ''
                if account_info:
                    masked_name = account_info.find('div',
                                                    {'class': 'ext-registration_username_header'})
                if masked_name:
                    masked_name = masked_name.get_text()
                    account_info = account_info.findAll('div', {'class': 'lstp-t'})
                if account_info:
                    profile_info = account_info[0].get_text()
                    profile_registred = account_info[1].get_text()
                else:
                    profile_info = None
                    profile_registred = None
            else:
                pass
            try:
                age = profile_info[:7].replace(',', '')
                cityok = profile_info[8:].replace(',', '')
                age = f''
                cityok = f'`{cityok}`'
                ok = f'\nüÜó –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: {masked_name} ({profile_info}, {masked_email} {profile_registred})'


            except:
                ok = ''
                cityok = ''
                age = ''
                masked_email = ''

            try:
                URLicq = "https://icq.im/" + email
                HEADERS = {
                    "User-Agent":
                        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0"
                }
                raq = requests.get(URLicq, headers=HEADERS)
                soup = BeautifulSoup(raq.content, 'html.parser')
                items = soup.findAll('div', class_='icq-profile__box')
                comps = []
                for item in items:
                    comps.append({
                        'icq':
                            item.find('h2', class_='icq-profile__name').get_text(strip=True)
                    })
                for comp in comps:
                    icq = comp['icq']
                    icq = f'üü¢ ICQ: {icq}'
            except:
                icq = ''

            gravatar = ''
            try:
                emailtohash = email
                hashed_name = hashlib.md5(emailtohash.encode()).hexdigest()
                rhash = requests.get(f'https://gravatar.com/{hashed_name}.json')
                data = rhash.json()
                GravatarFullName = data['entry'][0]['displayName']
                if rhash.status_code == 200:
                    gravatar = f'üåê *Gravatar:* gravatar.com/{GravatarFullName}'
            except:
                pass
            bbd = requests.get(
                'https://safsdaecr34r34wevtbernt.sdfsdfsfsd2321.repl.co/info?d=' + email).content.decode(
                "utf-8")
            print(bbd)
            bbd1 = requests.get(
                'https://wdwfg454df4gf45gf4d5fdfff.sdfsdfsfsd2321.repl.co/info?d=' + email).content.decode(
                "utf-8")
            print(bbd1)
            bbd2 = requests.get(
                'https://asd.sdfsdfsfsd2321.repl.co/info?d=' + email).content.decode(
                "utf-8")
            print(bbd2)
            

            try:
                memail = email
                mlogin = (memail.split("@"))[0]
                rm = requests.post(f"https://account.mail.ru/api/v1/user/password/restore?email={mlogin}@mail.ru")
                mdata = rm.json()

                phone = mdata['body']['phones'][0]

                print(
                    f'üó≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Mail.ru: {mlogin}@mail.ru\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\nüë§ –ü—Ä–æ—Ñ–∏–ª—å: https://my.mail.ru/mail.ru/{mlogin}',)

                emails = mdata['body']['emails'][0]
                emails2 = mdata['body']['emails'][1]

                print(f'üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞: {emails}')
                print(f'üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞: {emails2}')
            except:
                pass

                # @list.ru
                try:
                    memail = email
                    mlogin = (memail.split("@"))[0]
                    rm = requests.post(f"https://account.mail.ru/api/v1/user/password/restore?email={mlogin}@list.ru")
                    mdata = rm.json()

                    phone = mdata['body']['phones'][0]

                    print(
                        f'üó≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ List.ru: {mlogin}@list.ru\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\nüë§ –ü—Ä–æ—Ñ–∏–ª—å: https://my.mail.ru/list.ru/{mlogin}')

                    emails = mdata['body']['emails'][0]
                    emails2 = mdata['body']['emails'][1]

                    print(f'üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞: {emails}')
                    print(f'üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞: {emails2}')
                except:
                    pass

                # @bk.ru
                try:
                    memail = email
                    mlogin = (memail.split("@"))[0]
                    rm = requests.post(f"https://account.mail.ru/api/v1/user/password/restore?email={mlogin}@bk.ru")
                    mdata = rm.json()

                    phone = mdata['body']['phones'][0]

                    print(
                        f'üó≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ bk.ru: {mlogin}@bk.ru\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\nüë§ –ü—Ä–æ—Ñ–∏–ª—å: https://my.mail.ru/bk.ru/{mlogin}')

                    emails = mdata['body']['emails'][0]
                    emails2 = mdata['body']['emails'][1]

                    print(f'üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞: {emails}')
                    print(f'üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞: {emails2}')
                except:
                    pass

                # @inbox.ru
                try:
                    memail = email
                    mlogin = (memail.split("@"))[0]
                    rm = requests.post(f"https://account.mail.ru/api/v1/user/password/restore?email={mlogin}@inbox.ru")
                    mdata = rm.json()

                    phone = mdata['body']['phones'][0]

                    print(
                        f'üó≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Inbox.ru: {mlogin}@inbox.ru\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\nüë§ –ü—Ä–æ—Ñ–∏–ª—å: https://my.mail.ru/inbox.ru/{mlogin}')

                    emails = mdata['body']['emails'][0]
                    emails2 = mdata['body']['emails'][1]

                    print(f'üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞: {emails}')
                    print(f'üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞: {emails2}')
                except:
                    pass

                # @internet.ru
                try:
                    memail = email
                    mlogin = (memail.split("@"))[0]
                    rm = requests.post(
                        f"https://account.mail.ru/api/v1/user/password/restore?email={mlogin}@internet.ru")
                    mdata = rm.json()

                    phone = mdata['body']['phones'][0]

                    print(
                        f'üó≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Internet.ru: {mlogin}@internet.ru\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\nüë§ –ü—Ä–æ—Ñ–∏–ª—å: https://my.mail.ru/internet.ru/{mlogin}')

                    emails = mdata['body']['emails'][0]
                    emails2 = mdata['body']['emails'][1]

                    print(f'üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞: {emails}')
                    print(f'üìß –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞: {emails2}')
                except:
                    pass
            skype = 'üéá –ß–µ–∫–Ω—É—Ç—å —Å–∫–∞–π–ø: https://www.vedbex.com/email2skype'

            URLavitos = "https://sovaweb.herokuapp.com/find_em?em=" + email
            HEADERS = {"User-Agent":
                           "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0"
                       }
            ra = requests.get(URLavitos, headers=HEADERS)
            soup = BeautifulSoup(ra.content, 'html.parser')
            items = soup.findAll('form')
            comps = []
            for item in items:
                comps.append({
                    'infof':
                        item.find('textarea', class_='form-control').get_text(strip=True)
                })
            for comp in comps:
                wz = f"üìò –ì–¥–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n{comp['infof']}\n"

            dop = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: https://tools.epieos.com/?q=' + email.replace('@', '%40')
            print(f'{yandexx}\n{ok}\n{icq}\n{gravatar}\n{skype}\n{wz}\n{dop}')
            

        main()
    if choice == '3':
        def phone():
                print('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –§–ò–û, –∏—â–∏—Ç–µ –ª—É—á—à–µ —Ñ–∞–º–∏–ª–∏—é. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–º–µ—Ä, –º–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Ü–µ –Ω–µ –¥–æ–ø–∏—Å–∞—Ç—å 1-4 —Ü–∏—Ñ—Ä—ã(4 –º–∞–∫—Å–∏–º—É–º).\n\n')
                phonse = input('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: ')
                phonse = phonse.replace('+', '').replace('-', '').replace('(', '').replace(')',
                                                                                           '').replace(
                    ' ', '')
                phone = phonse[1:]


                ebbd = requests.get(
            'https://safsdaecr34r34wevtbernt.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
            "utf-8")
                print(ebbd)
                ebbd1 = requests.get(
            'https://wdwfg454df4gf45gf4d5fdfff.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
            "utf-8")
                print(ebbd1)
                ebbd2 = requests.get(
            'https://asd.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
            "utf-8")
                print(ebbd2)
                bbd = requests.get(
                    'https://4m89t04ghtm8mieieieieie9mtie9dbigdatanum.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd)
                bb1 = requests.get(
                    'https://wdwfg454df4gf45gf4d5fdfff.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bb1)
                bb2 = requests.get(
                    'https://werwecrvebt434b654ft43d3fg.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode("utf-8")
                print(bb2)
                bb3 = requests.get(
                    'https://servttbertbertvsrf.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode("utf-8")
                print(bb3)
                bb4 = requests.get(
                    'https://refretertertbert54vt45b65.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode("utf-8")
                print(bb4)
                bb5 = requests.get(
                    'https://pungentfrigidchief.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode("utf-8")
                print(bb5)
                bbd6 = requests.get(
                    'https://asd.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd6)
                bbd7 = requests.get(
                    'https://forsakenyummyleads.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd7)
                bbd8 = requests.get(
            'https://feistyunwittinginstructionset.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
            "utf-8")
                print(bbd8)
                bbd9 = requests.get(
                    'https://mellowhardtofindcopycat.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd9)
                bbd10 = requests.get(
                    'https://essentiallivespellchecker.sdfsdfsfsd2321.repl.co/info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd10)
                bbd11 = requests.get(
                    'https://achingcheerfullinuxpc.sdfsdfsfsd2321.repl.co//info?d=' + phone).content.decode(
                    "utf-8")
                print(bbd11)
else:
    print('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!')